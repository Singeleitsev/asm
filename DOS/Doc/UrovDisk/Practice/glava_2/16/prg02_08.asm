;----------------------------------------------------------
;prg02_08.asm - программа на ассемблере для демонстрации метода деления на примере задачи сбора информации об идентификаторах программы
;Вход: ввод с клавиатуры слов (длиной не более 10 символов).
;Выход: вывод слов, вызвавших коллизии, на экран.
;----------------------------------------------------------
masm
model small
elem_tab	struc
state	db	0	;байт признаков
len_id	db	0	;длина иденификатора
buf_id	db	8 dup (20h)	;буфер для хранения идентификатора
ends
buf_0ah	struc
len_buf	db	9	;длина buf_in
len_in	db	0	;действительная длина введенного слова (без учета 0dh)
buf_in	db	9 dup (20h)	;буфер для ввода (с учетом 0dh)
ends
.data
tab	elem_tab	64 dup (<>)
len_tab	db	64
len_elem	dw	10
buf	buf_0ah	<>
	db	0dh,0ah,'$'	;для вывода функцией 09h (int 21h)
.stack	256
.486
.code
main:
	mov	dx,@data
	mov	ds,dx
;вводим слова с клавиатуры
m1:
	lea	dx,buf
	mov	ah,0ah
	int	21h
;анализируем первую букву введенного слова
;если пробел, то на выход
	cmp	buf.buf_in,20h
	je	exit
;--------выделен фрагмент вычисления хеш-функции-------------------
	xor	bx,bx
	mov	cl,buf.len_in
	xor	si,si
	xor	ax,ax
m2:
	mov	bl,buf.buf_in[si]
	add	ax,bx
	inc	si
	loop	m2
	shr	ax,6	;делим на 64
;-----------------------------------------------------------------
;определяем адрес в таблице, по которому будет размещен идентификатор
	mul	len_elem	;умножаем на 10 (длина элемента таблицы)
	lea	di,tab
	add	di,ax
;анализируем занятость элемента
	test	[di].state,01h
	jnz	displ	;переход на отображение идентификатора, если произошла коллизия
;формируем элемент таблицы
	or	[di].state,01h	;установить бит 0 - бит занятости
;пересылка идентификатора и его длины в элемент таблицы
push	ds
pop	es
	lea	si,buf.len_in
	mov	cl,buf.len_in
	inc	cx	;длину тоже нужно захватить
	add	di,len_id
rep	movsb
	jmp	m1
displ:
;выводим идентификатор, вызвавший коллизию, на экран
	lea	dx,buf
	mov	ah,09h
	int	21h
	jmp	m1
exit:
	mov	ax,4c00h
	int	21h
end	main
