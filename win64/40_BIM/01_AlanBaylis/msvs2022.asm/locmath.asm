; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33133.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG124868 DB	'invalid argument', 00H
	ORG $+3
$SG124869 DB	'%s', 00H
	ORG $+9
$SG124870 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.38.33130\include\xmemory', 00H
	ORG $+14
$SG124871 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '8', 00H, '.', 00H, '3', 00H, '3'
	DB	00H, '1', 00H, '3', 00H, '0', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG124872 DB	00H, 00H
	ORG $+2
$SG124873 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?LoadIdentity@@YAXQEAM@Z			; LoadIdentity
PUBLIC	?CopyMatrix@@YAXQEAM0@Z				; CopyMatrix
PUBLIC	?MultMatrix@@YAXQEAM0@Z				; MultMatrix
PUBLIC	?MatrixInverse@@YAXQEAM@Z			; MatrixInverse
PUBLIC	?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z	; AxisAngleToMatrix
PUBLIC	?DotProduct@@YAMVVECTOR@@0@Z			; DotProduct
PUBLIC	?CrossVector@@YA?AVVECTOR@@V1@0@Z		; CrossVector
PUBLIC	?EulerToQuat@@YAXMMMPEAVQUAT@@@Z		; EulerToQuat
PUBLIC	?MagnitudeQuat@@YAMVQUAT@@@Z			; MagnitudeQuat
PUBLIC	?NormaliseQuat@@YA?AVQUAT@@V1@@Z		; NormaliseQuat
PUBLIC	?QuatToMatrix@@YAXVQUAT@@QEAM@Z			; QuatToMatrix
PUBLIC	?MultQuat@@YA?AVQUAT@@V1@0@Z			; MultQuat
PUBLIC	?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z		; GetNorm
PUBLIC	?MagnitudeVector@@YAMVVECTOR@@@Z		; MagnitudeVector
PUBLIC	?GetUnitVector@@YA?AVVECTOR@@V1@@Z		; GetUnitVector
PUBLIC	?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z		; GetEdgeVector
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@bf800000
EXTRN	cosf:PROC
EXTRN	sinf:PROC
EXTRN	sqrtf:PROC
EXTRN	??0VECTOR@@QEAA@MMM@Z:PROC			; VECTOR::VECTOR
EXTRN	??1VECTOR@@QEAA@XZ:PROC				; VECTOR::~VECTOR
EXTRN	??0VERTEX@@QEAA@MMMMMM@Z:PROC			; VERTEX::VERTEX
EXTRN	??1VERTEX@@QEAA@XZ:PROC				; VERTEX::~VERTEX
EXTRN	??0QUAT@@QEAA@MMMM@Z:PROC			; QUAT::QUAT
EXTRN	??1QUAT@@QEAA@XZ:PROC				; QUAT::~QUAT
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?cos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?sin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?LoadIdentity@@YAXQEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+380
	DD	imagerel $unwind$?LoadIdentity@@YAXQEAM@Z
$pdata$?CopyMatrix@@YAXQEAM0@Z DD imagerel $LN3
	DD	imagerel $LN3+637
	DD	imagerel $unwind$?CopyMatrix@@YAXQEAM0@Z
$pdata$?MultMatrix@@YAXQEAM0@Z DD imagerel $LN3
	DD	imagerel $LN3+3031
	DD	imagerel $unwind$?MultMatrix@@YAXQEAM0@Z
$pdata$?MatrixInverse@@YAXQEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+603
	DD	imagerel $unwind$?MatrixInverse@@YAXQEAM@Z
$pdata$?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z DD imagerel $LN7
	DD	imagerel $LN7+1138
	DD	imagerel $unwind$?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z@4HA DD imagerel ?dtor$0@?0??AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z@4HA
	DD	imagerel ?dtor$0@?0??AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?DotProduct@@YAMVVECTOR@@0@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?DotProduct@@YAMVVECTOR@@0@Z
$pdata$?CrossVector@@YA?AVVECTOR@@V1@0@Z DD imagerel $LN8
	DD	imagerel $LN8+333
	DD	imagerel $unwind$?CrossVector@@YA?AVVECTOR@@V1@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA DD imagerel ?dtor$0@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DD	imagerel ?dtor$0@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA
$pdata$?dtor$1@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA DD imagerel ?dtor$1@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DD	imagerel ?dtor$1@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?EulerToQuat@@YAXMMMPEAVQUAT@@@Z DD imagerel $LN3
	DD	imagerel $LN3+395
	DD	imagerel $unwind$?EulerToQuat@@YAXMMMPEAVQUAT@@@Z
$pdata$?MagnitudeQuat@@YAMVQUAT@@@Z DD imagerel $LN4
	DD	imagerel $LN4+133
	DD	imagerel $unwind$?MagnitudeQuat@@YAMVQUAT@@@Z
$pdata$?NormaliseQuat@@YA?AVQUAT@@V1@@Z DD imagerel $LN7
	DD	imagerel $LN7+321
	DD	imagerel $unwind$?NormaliseQuat@@YA?AVQUAT@@V1@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA DD imagerel ?dtor$0@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA
	DD	imagerel ?dtor$0@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA
$pdata$?dtor$1@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA DD imagerel ?dtor$1@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA
	DD	imagerel ?dtor$1@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?QuatToMatrix@@YAXVQUAT@@QEAM@Z DD imagerel $LN4
	DD	imagerel $LN4+809
	DD	imagerel $unwind$?QuatToMatrix@@YAXVQUAT@@QEAM@Z
$pdata$?MultQuat@@YA?AVQUAT@@V1@0@Z DD imagerel $LN14
	DD	imagerel $LN14+1106
	DD	imagerel $unwind$?MultQuat@@YA?AVQUAT@@V1@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD imagerel ?dtor$0@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	imagerel ?dtor$0@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
$pdata$?dtor$1@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD imagerel ?dtor$1@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	imagerel ?dtor$1@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
$pdata$?dtor$2@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD imagerel ?dtor$2@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	imagerel ?dtor$2@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA+35
	DD	imagerel $unwind$?dtor$2@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
$pdata$?dtor$3@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD imagerel ?dtor$3@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	imagerel ?dtor$3@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA+35
	DD	imagerel $unwind$?dtor$3@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
$pdata$?dtor$4@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD imagerel ?dtor$4@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	imagerel ?dtor$4@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA+38
	DD	imagerel $unwind$?dtor$4@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
$pdata$?dtor$5@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD imagerel ?dtor$5@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	imagerel ?dtor$5@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA+38
	DD	imagerel $unwind$?dtor$5@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
$pdata$?dtor$6@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD imagerel ?dtor$6@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	imagerel ?dtor$6@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA+38
	DD	imagerel $unwind$?dtor$6@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
$pdata$?dtor$7@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD imagerel ?dtor$7@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	imagerel ?dtor$7@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA+38
	DD	imagerel $unwind$?dtor$7@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z DD imagerel $LN6
	DD	imagerel $LN6+452
	DD	imagerel $unwind$?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z
$pdata$?MagnitudeVector@@YAMVVECTOR@@@Z DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?MagnitudeVector@@YAMVVECTOR@@@Z
$pdata$?GetUnitVector@@YA?AVVECTOR@@V1@@Z DD imagerel $LN7
	DD	imagerel $LN7+258
	DD	imagerel $unwind$?GetUnitVector@@YA?AVVECTOR@@V1@@Z
$pdata$?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z DD imagerel $LN8
	DD	imagerel $LN8+254
	DD	imagerel $unwind$?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA DD imagerel ?dtor$0@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DD	imagerel ?dtor$0@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA
$pdata$?dtor$1@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA DD imagerel ?dtor$1@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DD	imagerel ?dtor$1@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA
pdata	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$7@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$6@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$5@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$4@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$3@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$2@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z@4HA
	DD	00H
	DD	05H
voltbl	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixInverse@@YAXQEAM@Z
	DD	030H
	DD	0242H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MultMatrix@@YAXQEAM0@Z
	DD	035H
	DD	0bbeH
voltbl	ENDS
CONST	SEGMENT
	ORG $+2
?MultMatrix@@YAXQEAM0@Z$rtcName$0 DB 074H		; MultMatrix
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
?MultMatrix@@YAXQEAM0@Z$rtcVarDesc DD 030H		; MultMatrix
	DD	040H
	DQ	FLAT:?MultMatrix@@YAXQEAM0@Z$rtcName$0
	ORG $+48
?MultMatrix@@YAXQEAM0@Z$rtcFrameData DD 01H		; MultMatrix
	DD	00H
	DQ	FLAT:?MultMatrix@@YAXQEAM0@Z$rtcVarDesc
?MatrixInverse@@YAXQEAM@Z$rtcName$0 DB 06eH		; MatrixInverse
	DB	00H
	ORG $+14
?MatrixInverse@@YAXQEAM@Z$rtcVarDesc DD 030H		; MatrixInverse
	DD	040H
	DQ	FLAT:?MatrixInverse@@YAXQEAM@Z$rtcName$0
	ORG $+48
?MatrixInverse@@YAXQEAM@Z$rtcFrameData DD 01H		; MatrixInverse
	DD	00H
	DQ	FLAT:?MatrixInverse@@YAXQEAM@Z$rtcVarDesc
?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z$rtcName$0 DB 071H ; AxisAngleToMatrix
	DB	00H
	ORG $+14
?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z$rtcVarDesc DD 038H ; AxisAngleToMatrix
	DD	010H
	DQ	FLAT:?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z$rtcName$0
	ORG $+48
?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z$rtcFrameData DD 01H ; AxisAngleToMatrix
	DD	00H
	DQ	FLAT:?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z$rtcVarDesc
?CrossVector@@YA?AVVECTOR@@V1@0@Z$rtcName$0 DB 076H	; CrossVector
	DB	065H
	DB	063H
	DB	033H
	DB	00H
	ORG $+11
?CrossVector@@YA?AVVECTOR@@V1@0@Z$rtcVarDesc DD 028H	; CrossVector
	DD	0cH
	DQ	FLAT:?CrossVector@@YA?AVVECTOR@@V1@0@Z$rtcName$0
	ORG $+48
?CrossVector@@YA?AVVECTOR@@V1@0@Z$rtcFrameData DD 01H	; CrossVector
	DD	00H
	DQ	FLAT:?CrossVector@@YA?AVVECTOR@@V1@0@Z$rtcVarDesc
?NormaliseQuat@@YA?AVQUAT@@V1@@Z$rtcName$0 DB 071H	; NormaliseQuat
	DB	032H
	DB	00H
	ORG $+13
?NormaliseQuat@@YA?AVQUAT@@V1@@Z$rtcVarDesc DD 038H	; NormaliseQuat
	DD	010H
	DQ	FLAT:?NormaliseQuat@@YA?AVQUAT@@V1@@Z$rtcName$0
	ORG $+48
?NormaliseQuat@@YA?AVQUAT@@V1@@Z$rtcFrameData DD 01H	; NormaliseQuat
	DD	00H
	DQ	FLAT:?NormaliseQuat@@YA?AVQUAT@@V1@@Z$rtcVarDesc
?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$0 DB 071H		; MultQuat
	DB	033H
	DB	00H
	ORG $+5
?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$1 DB 076H		; MultQuat
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	071H
	DB	031H
	DB	00H
	ORG $+7
?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$2 DB 076H		; MultQuat
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	071H
	DB	032H
	DB	00H
	ORG $+7
?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$3 DB 074H		; MultQuat
	DB	065H
	DB	06dH
	DB	070H
	DB	076H
	DB	065H
	DB	063H
	DB	031H
	DB	00H
	ORG $+7
?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$4 DB 074H		; MultQuat
	DB	065H
	DB	06dH
	DB	070H
	DB	076H
	DB	065H
	DB	063H
	DB	032H
	DB	00H
	ORG $+7
?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$5 DB 074H		; MultQuat
	DB	065H
	DB	06dH
	DB	070H
	DB	076H
	DB	065H
	DB	063H
	DB	033H
	DB	00H
	ORG $+15
?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcVarDesc DD 0128H	; MultQuat
	DD	0cH
	DQ	FLAT:?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$5
	DD	0f8H
	DD	0cH
	DQ	FLAT:?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$4
	DD	0c8H
	DD	0cH
	DQ	FLAT:?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$3
	DD	098H
	DD	0cH
	DQ	FLAT:?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcName$0
	ORG $+288
?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcFrameData DD 06H	; MultQuat
	DD	00H
	DQ	FLAT:?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcVarDesc
?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z$rtcName$0 DB 074H	; GetNorm
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	076H
	DB	065H
	DB	072H
	DB	074H
	DB	065H
	DB	078H
	DB	00H
	ORG $+4
?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z$rtcVarDesc DD 068H	; GetNorm
	DD	024H
	DQ	FLAT:?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z$rtcName$0
	ORG $+48
?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z$rtcFrameData DD 01H	; GetNorm
	DD	00H
	DQ	FLAT:?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z$rtcVarDesc
?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z$rtcName$0 DB 074H	; GetEdgeVector
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	076H
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+4
?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z$rtcVarDesc DD 028H	; GetEdgeVector
	DD	0cH
	DQ	FLAT:?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z$rtcName$0
	ORG $+48
?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z$rtcFrameData DD 01H	; GetEdgeVector
	DD	00H
	DQ	FLAT:?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?LoadIdentity@@YAXQEAM@Z DD 010601H
	DD	07006H
$unwind$?CopyMatrix@@YAXQEAM0@Z DD 010b01H
	DD	0700bH
$unwind$?MultMatrix@@YAXQEAM0@Z DD 033d19H
	DD	0120112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?MatrixInverse@@YAXQEAM@Z DD 033819H
	DD	012010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z DD 043711H
	DD	015011eH
	DD	060167017H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z
$cppxdata$?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z DB 028H
	DD	imagerel $stateUnwindMap$?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z
	DD	imagerel $ip2state$?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z
$stateUnwindMap$?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z@4HA
$ip2state$?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z DB 06H
	DB	00H
	DB	00H
	DB	084H
	DB	02H
	DB	0f1H, 0fH
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?DotProduct@@YAMVVECTOR@@0@Z DD 020f01H
	DD	0700b720fH
$unwind$?CrossVector@@YA?AVVECTOR@@V1@0@Z DD 032b11H
	DD	07011a215H
	DD	06010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?CrossVector@@YA?AVVECTOR@@V1@0@Z
$cppxdata$?CrossVector@@YA?AVVECTOR@@V1@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?CrossVector@@YA?AVVECTOR@@V1@0@Z
	DD	imagerel $ip2state$?CrossVector@@YA?AVVECTOR@@V1@0@Z
$stateUnwindMap$?CrossVector@@YA?AVVECTOR@@V1@0@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA
$ip2state$?CrossVector@@YA?AVVECTOR@@V1@0@Z DB 08H
	DB	00H
	DB	00H
	DB	'f'
	DB	04H
	DB	085H, 03H
	DB	02H
	DB	016H
	DB	00H
	ORG $+2
$unwind$?dtor$0@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?EulerToQuat@@YAXMMMPEAVQUAT@@@Z DD 021c01H
	DD	07018721cH
$unwind$?MagnitudeQuat@@YAMVQUAT@@@Z DD 020a01H
	DD	07006720aH
$unwind$?NormaliseQuat@@YA?AVQUAT@@V1@@Z DD 042c11H
	DD	0110113H
	DD	0600b700cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?NormaliseQuat@@YA?AVQUAT@@V1@@Z
$cppxdata$?NormaliseQuat@@YA?AVQUAT@@V1@@Z DB 028H
	DD	imagerel $stateUnwindMap$?NormaliseQuat@@YA?AVQUAT@@V1@@Z
	DD	imagerel $ip2state$?NormaliseQuat@@YA?AVQUAT@@V1@@Z
$stateUnwindMap$?NormaliseQuat@@YA?AVQUAT@@V1@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA
$ip2state$?NormaliseQuat@@YA?AVQUAT@@V1@@Z DB 0aH
	DB	00H
	DB	00H
	DB	'h'
	DB	02H
	DB	'D'
	DB	04H
	DB	0b1H, 02H
	DB	02H
	DB	016H
	DB	00H
$unwind$?dtor$0@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?QuatToMatrix@@YAXVQUAT@@QEAM@Z DD 020f01H
	DD	0700b920fH
$unwind$?MultQuat@@YA?AVQUAT@@V1@0@Z DD 043111H
	DD	0370118H
	DD	060107011H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?MultQuat@@YA?AVQUAT@@V1@0@Z
$cppxdata$?MultQuat@@YA?AVQUAT@@V1@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?MultQuat@@YA?AVQUAT@@V1@0@Z
	DD	imagerel $ip2state$?MultQuat@@YA?AVQUAT@@V1@0@Z
$stateUnwindMap$?MultQuat@@YA?AVQUAT@@V1@0@Z DB 010H
	DB	0eH
	DD	imagerel ?dtor$0@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$3@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$4@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$5@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$6@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$7@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA
$ip2state$?MultQuat@@YA?AVQUAT@@V1@0@Z DB ' '
	DB	00H
	DB	00H
	DB	'x'
	DB	04H
	DB	'D'
	DB	06H
	DB	'('
	DB	08H
	DB	'.'
	DB	0aH
	DB	'A', 02H
	DB	0cH
	DB	'.'
	DB	0eH
	DB	'.'
	DB	010H
	DB	0edH, 09H
	DB	0eH
	DB	01cH
	DB	0cH
	DB	01cH
	DB	0aH
	DB	01cH
	DB	08H
	DB	01cH
	DB	06H
	DB	016H
	DB	04H
	DB	016H
	DB	02H
	DB	01cH
	DB	00H
	ORG $+3
$unwind$?dtor$0@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$3@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$4@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$5@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$6@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$7@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z DD 043901H
	DD	0150120H
	DD	060187019H
$unwind$?MagnitudeVector@@YAMVVECTOR@@@Z DD 020a01H
	DD	07006720aH
$unwind$?GetUnitVector@@YA?AVVECTOR@@V1@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z DD 032b11H
	DD	07011a215H
	DD	06010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z
$cppxdata$?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z
	DD	imagerel $ip2state$?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z
$stateUnwindMap$?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA
$ip2state$?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z DB 08H
	DB	00H
	DB	00H
	DB	'f'
	DB	04H
	DB	'I', 02H
	DB	02H
	DB	016H
	DB	00H
	ORG $+2
$unwind$?dtor$0@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
temp_vector$ = 40
$T4 = 68
__$ReturnUdt$ = 112
point1$ = 120
point2$ = 128
?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z PROC		; GetEdgeVector
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 394
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]
	mov	DWORD PTR $T4[rsp], 0
; Line 395
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR temp_vector$[rsp]
	call	??0VECTOR@@QEAA@MMM@Z			; VECTOR::VECTOR
; Line 396
	mov	rax, QWORD PTR point1$[rsp]
	mov	rcx, QWORD PTR point2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR temp_vector$[rsp], xmm0
; Line 397
	mov	rax, QWORD PTR point1$[rsp]
	mov	rcx, QWORD PTR point2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR temp_vector$[rsp+4], xmm0
; Line 398
	mov	rax, QWORD PTR point1$[rsp]
	mov	rcx, QWORD PTR point2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR temp_vector$[rsp+8], xmm0
; Line 399
	lea	rax, QWORD PTR temp_vector$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	eax, DWORD PTR $T4[rsp]
	or	eax, 1
	mov	DWORD PTR $T4[rsp], eax
	lea	rcx, QWORD PTR temp_vector$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	npad	1
	mov	rcx, QWORD PTR point1$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	npad	1
	mov	rcx, QWORD PTR point2$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
; Line 400
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?GetEdgeVector@@YA?AVVECTOR@@V1@0@Z ENDP		; GetEdgeVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
temp_vector$ = 40
$T4 = 68
__$ReturnUdt$ = 112
point1$ = 120
point2$ = 128
?dtor$0@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA PROC	; `GetEdgeVector'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR point2$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA ENDP	; `GetEdgeVector'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
temp_vector$ = 40
$T4 = 68
__$ReturnUdt$ = 112
point1$ = 120
point2$ = 128
?dtor$1@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA PROC	; `GetEdgeVector'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR point1$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??GetEdgeVector@@YA?AVVECTOR@@V1@0@Z@4HA ENDP	; `GetEdgeVector'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
length$ = 32
$T1 = 36
__$ReturnUdt$ = 80
vector$ = 88
?GetUnitVector@@YA?AVVECTOR@@V1@@Z PROC			; GetUnitVector
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 371
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	DWORD PTR $T1[rsp], 0
; Line 376
	mov	rax, QWORD PTR vector$[rsp]
	mov	rcx, QWORD PTR vector$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR vector$[rsp]
	mov	rcx, QWORD PTR vector$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR vector$[rsp]
	mov	rcx, QWORD PTR vector$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	call	?sqrt@@YAMM@Z				; sqrt
	movss	DWORD PTR length$[rsp], xmm0
; Line 382
	movss	xmm0, DWORD PTR length$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@GetUnitVec
	jne	SHORT $LN2@GetUnitVec
; Line 383
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR length$[rsp], xmm0
$LN2@GetUnitVec:
; Line 387
	mov	rax, QWORD PTR vector$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR length$[rsp]
	mov	rax, QWORD PTR vector$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 388
	mov	rax, QWORD PTR vector$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	divss	xmm0, DWORD PTR length$[rsp]
	mov	rax, QWORD PTR vector$[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 389
	mov	rax, QWORD PTR vector$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR length$[rsp]
	mov	rax, QWORD PTR vector$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 390
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR vector$[rsp]
	mov	ecx, 12
	rep movsb
	mov	eax, DWORD PTR $T1[rsp]
	or	eax, 1
	mov	DWORD PTR $T1[rsp], eax
	mov	rcx, QWORD PTR vector$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
; Line 391
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?GetUnitVector@@YA?AVVECTOR@@V1@@Z ENDP			; GetUnitVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = 48
vec1$ = 80
?MagnitudeVector@@YAMVVECTOR@@@Z PROC			; MagnitudeVector
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 366
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
; Line 367
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec1$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec1$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec1$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	call	?sqrt@@YAMM@Z				; sqrt
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rcx, QWORD PTR vec1$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	movss	xmm0, DWORD PTR $T1[rsp]
; Line 368
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?MagnitudeVector@@YAMVVECTOR@@@Z ENDP			; MagnitudeVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
ux$ = 64
uy$ = 68
uz$ = 72
vx$ = 76
vy$ = 80
vz$ = 84
temp_vertex$ = 104
$T4 = 148
__$ReturnUdt$ = 192
x1$ = 200
y1$ = 208
z1$ = 216
x2$ = 224
y2$ = 232
z2$ = 240
x3$ = 248
y3$ = 256
z3$ = 264
?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z PROC			; GetNorm
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 345
$LN6:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]
	mov	DWORD PTR $T4[rsp], 0
; Line 352
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR temp_vertex$[rsp]
	call	??0VERTEX@@QEAA@MMMMMM@Z		; VERTEX::VERTEX
; Line 353
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x2$[rsp]
	movss	DWORD PTR ux$[rsp], xmm0
; Line 354
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR uy$[rsp], xmm0
; Line 355
	movss	xmm0, DWORD PTR z1$[rsp]
	subss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR uz$[rsp], xmm0
; Line 356
	movss	xmm0, DWORD PTR x3$[rsp]
	subss	xmm0, DWORD PTR x2$[rsp]
	movss	DWORD PTR vx$[rsp], xmm0
; Line 357
	movss	xmm0, DWORD PTR y3$[rsp]
	subss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR vy$[rsp], xmm0
; Line 358
	movss	xmm0, DWORD PTR z3$[rsp]
	subss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR vz$[rsp], xmm0
; Line 359
	movss	xmm0, DWORD PTR uy$[rsp]
	mulss	xmm0, DWORD PTR vz$[rsp]
	movss	xmm1, DWORD PTR vy$[rsp]
	mulss	xmm1, DWORD PTR uz$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR temp_vertex$[rsp+16], xmm0
; Line 360
	movss	xmm0, DWORD PTR uz$[rsp]
	mulss	xmm0, DWORD PTR vx$[rsp]
	movss	xmm1, DWORD PTR vz$[rsp]
	mulss	xmm1, DWORD PTR ux$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR temp_vertex$[rsp+20], xmm0
; Line 361
	movss	xmm0, DWORD PTR ux$[rsp]
	mulss	xmm0, DWORD PTR vy$[rsp]
	movss	xmm1, DWORD PTR vx$[rsp]
	mulss	xmm1, DWORD PTR uy$[rsp]
	subss	xmm0, xmm1
	movss	DWORD PTR temp_vertex$[rsp+24], xmm0
; Line 362
	lea	rax, QWORD PTR temp_vertex$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	eax, DWORD PTR $T4[rsp]
	or	eax, 1
	mov	DWORD PTR $T4[rsp], eax
	lea	rcx, QWORD PTR temp_vertex$[rsp]
	call	??1VERTEX@@QEAA@XZ			; VERTEX::~VERTEX
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
; Line 363
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?GetNorm@@YA?AVVERTEX@@MMMMMMMMM@Z ENDP			; GetNorm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
q3$ = 56
vectorq1$ = 104
vectorq2$ = 152
tempvec1$ = 200
tempvec2$ = 248
tempvec3$ = 296
$T9 = 324
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv143 = 420
tv224 = 424
__$ReturnUdt$ = 464
q1$ = 472
q2$ = 480
?MultQuat@@YA?AVQUAT@@V1@0@Z PROC			; MultQuat
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 310
$LN14:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+464]
	mov	DWORD PTR $T15[rsp], 0
; Line 317
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR q3$[rsp]
	call	??0QUAT@@QEAA@MMMM@Z			; QUAT::QUAT
	npad	1
; Line 318
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR vectorq1$[rsp]
	call	??0VECTOR@@QEAA@MMM@Z			; VECTOR::VECTOR
	npad	1
; Line 319
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR vectorq2$[rsp]
	call	??0VECTOR@@QEAA@MMM@Z			; VECTOR::VECTOR
	npad	1
; Line 320
	mov	rax, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR vectorq1$[rsp], xmm0
; Line 321
	mov	rax, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR vectorq1$[rsp+4], xmm0
; Line 322
	mov	rax, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR vectorq1$[rsp+8], xmm0
; Line 323
	mov	rax, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR vectorq2$[rsp], xmm0
; Line 324
	mov	rax, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR vectorq2$[rsp+4], xmm0
; Line 325
	mov	rax, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR vectorq2$[rsp+8], xmm0
; Line 327
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR tempvec1$[rsp]
	call	??0VECTOR@@QEAA@MMM@Z			; VECTOR::VECTOR
	npad	1
; Line 328
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR tempvec2$[rsp]
	call	??0VECTOR@@QEAA@MMM@Z			; VECTOR::VECTOR
	npad	1
; Line 329
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR tempvec3$[rsp]
	call	??0VECTOR@@QEAA@MMM@Z			; VECTOR::VECTOR
	npad	1
; Line 330
	mov	rax, QWORD PTR q1$[rsp]
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR tv143[rsp], xmm0
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR vectorq2$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR vectorq1$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	?DotProduct@@YAMVVECTOR@@0@Z		; DotProduct
	movss	xmm1, DWORD PTR tv143[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR q3$[rsp+12], xmm0
; Line 331
	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR vectorq2$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR vectorq1$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T13[rsp]
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?CrossVector@@YA?AVVECTOR@@V1@0@Z	; CrossVector
	mov	QWORD PTR tv224[rsp], rax
	lea	rax, QWORD PTR tempvec1$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv224[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T9[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
; Line 332
	mov	rax, QWORD PTR q1$[rsp]
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tempvec2$[rsp], xmm0
; Line 333
	mov	rax, QWORD PTR q1$[rsp]
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR tempvec2$[rsp+4], xmm0
; Line 334
	mov	rax, QWORD PTR q1$[rsp]
	mov	rcx, QWORD PTR q2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR tempvec2$[rsp+8], xmm0
; Line 335
	mov	rax, QWORD PTR q2$[rsp]
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tempvec3$[rsp], xmm0
; Line 336
	mov	rax, QWORD PTR q2$[rsp]
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR tempvec3$[rsp+4], xmm0
; Line 337
	mov	rax, QWORD PTR q2$[rsp]
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR tempvec3$[rsp+8], xmm0
; Line 338
	movss	xmm0, DWORD PTR tempvec1$[rsp]
	addss	xmm0, DWORD PTR tempvec2$[rsp]
	addss	xmm0, DWORD PTR tempvec3$[rsp]
	movss	DWORD PTR q3$[rsp], xmm0
; Line 339
	movss	xmm0, DWORD PTR tempvec1$[rsp+4]
	addss	xmm0, DWORD PTR tempvec2$[rsp+4]
	addss	xmm0, DWORD PTR tempvec3$[rsp+4]
	movss	DWORD PTR q3$[rsp+4], xmm0
; Line 340
	movss	xmm0, DWORD PTR tempvec1$[rsp+8]
	addss	xmm0, DWORD PTR tempvec2$[rsp+8]
	addss	xmm0, DWORD PTR tempvec3$[rsp+8]
	movss	DWORD PTR q3$[rsp+8], xmm0
; Line 341
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR q3$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T14[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?NormaliseQuat@@YA?AVQUAT@@V1@@Z	; NormaliseQuat
	mov	eax, DWORD PTR $T15[rsp]
	or	eax, 1
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR tempvec3$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	npad	1
	lea	rcx, QWORD PTR tempvec2$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	npad	1
	lea	rcx, QWORD PTR tempvec1$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	npad	1
	lea	rcx, QWORD PTR vectorq2$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	npad	1
	lea	rcx, QWORD PTR vectorq1$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	npad	1
	lea	rcx, QWORD PTR q3$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	npad	1
	mov	rcx, QWORD PTR q1$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	npad	1
	mov	rcx, QWORD PTR q2$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
; Line 342
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?MultQuat@@YA?AVQUAT@@V1@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 440				; 000001b8H
	pop	rdi
	pop	rsi
	ret	0
?MultQuat@@YA?AVQUAT@@V1@0@Z ENDP			; MultQuat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q3$ = 56
vectorq1$ = 104
vectorq2$ = 152
tempvec1$ = 200
tempvec2$ = 248
tempvec3$ = 296
$T9 = 324
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv143 = 420
tv224 = 424
__$ReturnUdt$ = 464
q1$ = 472
q2$ = 480
?dtor$0@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA PROC	; `MultQuat'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR q2$[rbp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA ENDP	; `MultQuat'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q3$ = 56
vectorq1$ = 104
vectorq2$ = 152
tempvec1$ = 200
tempvec2$ = 248
tempvec3$ = 296
$T9 = 324
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv143 = 420
tv224 = 424
__$ReturnUdt$ = 464
q1$ = 472
q2$ = 480
?dtor$1@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA PROC	; `MultQuat'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR q1$[rbp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA ENDP	; `MultQuat'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q3$ = 56
vectorq1$ = 104
vectorq2$ = 152
tempvec1$ = 200
tempvec2$ = 248
tempvec3$ = 296
$T9 = 324
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv143 = 420
tv224 = 424
__$ReturnUdt$ = 464
q1$ = 472
q2$ = 480
?dtor$2@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA PROC	; `MultQuat'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR q3$[rbp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA ENDP	; `MultQuat'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q3$ = 56
vectorq1$ = 104
vectorq2$ = 152
tempvec1$ = 200
tempvec2$ = 248
tempvec3$ = 296
$T9 = 324
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv143 = 420
tv224 = 424
__$ReturnUdt$ = 464
q1$ = 472
q2$ = 480
?dtor$3@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA PROC	; `MultQuat'::`1'::dtor$3
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR vectorq1$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$3@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA ENDP	; `MultQuat'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q3$ = 56
vectorq1$ = 104
vectorq2$ = 152
tempvec1$ = 200
tempvec2$ = 248
tempvec3$ = 296
$T9 = 324
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv143 = 420
tv224 = 424
__$ReturnUdt$ = 464
q1$ = 472
q2$ = 480
?dtor$4@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA PROC	; `MultQuat'::`1'::dtor$4
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR vectorq2$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$4@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA ENDP	; `MultQuat'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q3$ = 56
vectorq1$ = 104
vectorq2$ = 152
tempvec1$ = 200
tempvec2$ = 248
tempvec3$ = 296
$T9 = 324
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv143 = 420
tv224 = 424
__$ReturnUdt$ = 464
q1$ = 472
q2$ = 480
?dtor$5@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA PROC	; `MultQuat'::`1'::dtor$5
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR tempvec1$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$5@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA ENDP	; `MultQuat'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q3$ = 56
vectorq1$ = 104
vectorq2$ = 152
tempvec1$ = 200
tempvec2$ = 248
tempvec3$ = 296
$T9 = 324
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv143 = 420
tv224 = 424
__$ReturnUdt$ = 464
q1$ = 472
q2$ = 480
?dtor$6@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA PROC	; `MultQuat'::`1'::dtor$6
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR tempvec2$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$6@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA ENDP	; `MultQuat'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q3$ = 56
vectorq1$ = 104
vectorq2$ = 152
tempvec1$ = 200
tempvec2$ = 248
tempvec3$ = 296
$T9 = 324
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
tv143 = 420
tv224 = 424
__$ReturnUdt$ = 464
q1$ = 472
q2$ = 480
?dtor$7@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA PROC	; `MultQuat'::`1'::dtor$7
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR tempvec3$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$7@?0??MultQuat@@YA?AVQUAT@@V1@0@Z@4HA ENDP	; `MultQuat'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
wx$ = 32
wy$ = 36
wz$ = 40
xx$ = 44
yy$ = 48
yz$ = 52
xy$ = 56
xz$ = 60
zz$ = 64
x2$ = 68
y2$ = 72
z2$ = 76
quat$ = 96
m$ = 104
?QuatToMatrix@@YAXVQUAT@@QEAM@Z PROC			; QuatToMatrix
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 276
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
; Line 279
	mov	rax, QWORD PTR quat$[rsp]
	mov	rcx, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR x2$[rsp], xmm0
; Line 280
	mov	rax, QWORD PTR quat$[rsp]
	mov	rcx, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR y2$[rsp], xmm0
; Line 281
	mov	rax, QWORD PTR quat$[rsp]
	mov	rcx, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR z2$[rsp], xmm0
; Line 282
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR x2$[rsp]
	movss	DWORD PTR xx$[rsp], xmm0
; Line 283
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR xy$[rsp], xmm0
; Line 284
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR xz$[rsp], xmm0
; Line 285
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR yy$[rsp], xmm0
; Line 286
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR yz$[rsp], xmm0
; Line 287
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR zz$[rsp], xmm0
; Line 288
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR x2$[rsp]
	movss	DWORD PTR wx$[rsp], xmm0
; Line 289
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR wy$[rsp], xmm0
; Line 290
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR wz$[rsp], xmm0
; Line 291
	movss	xmm0, DWORD PTR yy$[rsp]
	addss	xmm0, DWORD PTR zz$[rsp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 292
	movss	xmm0, DWORD PTR xy$[rsp]
	subss	xmm0, DWORD PTR wz$[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 293
	movss	xmm0, DWORD PTR xz$[rsp]
	addss	xmm0, DWORD PTR wy$[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 294
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 295
	movss	xmm0, DWORD PTR xy$[rsp]
	addss	xmm0, DWORD PTR wz$[rsp]
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 296
	movss	xmm0, DWORD PTR xx$[rsp]
	addss	xmm0, DWORD PTR zz$[rsp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 297
	movss	xmm0, DWORD PTR yz$[rsp]
	subss	xmm0, DWORD PTR wx$[rsp]
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 298
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 299
	movss	xmm0, DWORD PTR xz$[rsp]
	subss	xmm0, DWORD PTR wy$[rsp]
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 300
	movss	xmm0, DWORD PTR yz$[rsp]
	addss	xmm0, DWORD PTR wx$[rsp]
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 301
	movss	xmm0, DWORD PTR xx$[rsp]
	addss	xmm0, DWORD PTR yy$[rsp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 302
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 303
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 304
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 305
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 306
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 307
	mov	rcx, QWORD PTR quat$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?QuatToMatrix@@YAXVQUAT@@QEAM@Z ENDP			; QuatToMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
q2$ = 56
Mag$ = 84
$T4 = 96
$T5 = 112
__$ReturnUdt$ = 160
q1$ = 168
?NormaliseQuat@@YA?AVQUAT@@V1@@Z PROC			; NormaliseQuat
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 264
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	DWORD PTR $T5[rsp], 0
; Line 265
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR q2$[rsp]
	call	??0QUAT@@QEAA@MMMM@Z			; QUAT::QUAT
	npad	1
; Line 267
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR q1$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T4[rsp]
	call	?MagnitudeQuat@@YAMVQUAT@@@Z		; MagnitudeQuat
	movss	DWORD PTR Mag$[rsp], xmm0
; Line 268
	mov	rax, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	divss	xmm0, DWORD PTR Mag$[rsp]
	movss	DWORD PTR q2$[rsp+12], xmm0
; Line 269
	mov	rax, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR Mag$[rsp]
	movss	DWORD PTR q2$[rsp], xmm0
; Line 270
	mov	rax, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	divss	xmm0, DWORD PTR Mag$[rsp]
	movss	DWORD PTR q2$[rsp+4], xmm0
; Line 271
	mov	rax, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR Mag$[rsp]
	movss	DWORD PTR q2$[rsp+8], xmm0
; Line 272
	lea	rax, QWORD PTR q2$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR $T5[rsp]
	or	eax, 1
	mov	DWORD PTR $T5[rsp], eax
	lea	rcx, QWORD PTR q2$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	npad	1
	mov	rcx, QWORD PTR q1$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
; Line 273
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?NormaliseQuat@@YA?AVQUAT@@V1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?NormaliseQuat@@YA?AVQUAT@@V1@@Z ENDP			; NormaliseQuat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q2$ = 56
Mag$ = 84
$T4 = 96
$T5 = 112
__$ReturnUdt$ = 160
q1$ = 168
?dtor$0@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA PROC	; `NormaliseQuat'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR q1$[rbp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA ENDP	; `NormaliseQuat'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q2$ = 56
Mag$ = 84
$T4 = 96
$T5 = 112
__$ReturnUdt$ = 160
q1$ = 168
?dtor$1@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA PROC	; `NormaliseQuat'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR q2$[rbp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??NormaliseQuat@@YA?AVQUAT@@V1@@Z@4HA ENDP	; `NormaliseQuat'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = 48
q1$ = 80
?MagnitudeQuat@@YAMVQUAT@@@Z PROC			; MagnitudeQuat
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 259
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
; Line 260
	mov	rax, QWORD PTR q1$[rsp]
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR q1$[rsp]
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR q1$[rsp]
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR q1$[rsp]
	mov	rcx, QWORD PTR q1$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	call	?sqrt@@YAMM@Z				; sqrt
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rcx, QWORD PTR q1$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	movss	xmm0, DWORD PTR $T1[rsp]
; Line 261
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?MagnitudeQuat@@YAMVQUAT@@@Z ENDP			; MagnitudeQuat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
cr$ = 32
cp$ = 36
cy$ = 40
sr$ = 44
sp$ = 48
sy$ = 52
cpcy$ = 56
spsy$ = 60
roll$ = 80
pitch$ = 88
yaw$ = 96
quat$ = 104
?EulerToQuat@@YAXMMMPEAVQUAT@@@Z PROC			; EulerToQuat
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 233
$LN3:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H
; Line 244
	movss	xmm0, DWORD PTR roll$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cr$[rsp], xmm0
; Line 245
	movss	xmm0, DWORD PTR pitch$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cp$[rsp], xmm0
; Line 246
	movss	xmm0, DWORD PTR yaw$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cy$[rsp], xmm0
; Line 247
	movss	xmm0, DWORD PTR roll$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sr$[rsp], xmm0
; Line 248
	movss	xmm0, DWORD PTR pitch$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sp$[rsp], xmm0
; Line 249
	movss	xmm0, DWORD PTR yaw$[rsp]
	divss	xmm0, DWORD PTR __real@40000000
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sy$[rsp], xmm0
; Line 250
	movss	xmm0, DWORD PTR cp$[rsp]
	mulss	xmm0, DWORD PTR cy$[rsp]
	movss	DWORD PTR cpcy$[rsp], xmm0
; Line 251
	movss	xmm0, DWORD PTR sp$[rsp]
	mulss	xmm0, DWORD PTR sy$[rsp]
	movss	DWORD PTR spsy$[rsp], xmm0
; Line 252
	movss	xmm0, DWORD PTR cr$[rsp]
	mulss	xmm0, DWORD PTR cpcy$[rsp]
	movss	xmm1, DWORD PTR sr$[rsp]
	mulss	xmm1, DWORD PTR spsy$[rsp]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR quat$[rsp]
	movss	DWORD PTR [rax+12], xmm0
; Line 253
	movss	xmm0, DWORD PTR sr$[rsp]
	mulss	xmm0, DWORD PTR cpcy$[rsp]
	movss	xmm1, DWORD PTR cr$[rsp]
	mulss	xmm1, DWORD PTR spsy$[rsp]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR quat$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 254
	movss	xmm0, DWORD PTR cr$[rsp]
	mulss	xmm0, DWORD PTR sp$[rsp]
	mulss	xmm0, DWORD PTR cy$[rsp]
	movss	xmm1, DWORD PTR sr$[rsp]
	mulss	xmm1, DWORD PTR cp$[rsp]
	mulss	xmm1, DWORD PTR sy$[rsp]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR quat$[rsp]
	movss	DWORD PTR [rax+4], xmm0
; Line 255
	movss	xmm0, DWORD PTR cr$[rsp]
	mulss	xmm0, DWORD PTR cp$[rsp]
	mulss	xmm0, DWORD PTR sy$[rsp]
	movss	xmm1, DWORD PTR sr$[rsp]
	mulss	xmm1, DWORD PTR sp$[rsp]
	mulss	xmm1, DWORD PTR cy$[rsp]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR quat$[rsp]
	movss	DWORD PTR [rax+8], xmm0
; Line 256
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?EulerToQuat@@YAXMMMPEAVQUAT@@@Z ENDP			; EulerToQuat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
vec3$ = 40
$T4 = 68
__$ReturnUdt$ = 112
vec1$ = 120
vec2$ = 128
?CrossVector@@YA?AVVECTOR@@V1@0@Z PROC			; CrossVector
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 213
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]
	mov	DWORD PTR $T4[rsp], 0
; Line 225
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR vec3$[rsp]
	call	??0VECTOR@@QEAA@MMM@Z			; VECTOR::VECTOR
; Line 226
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec2$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	movss	DWORD PTR vec3$[rsp], xmm0
; Line 227
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR vec3$[rsp+4], xmm0
; Line 228
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx]
	subss	xmm0, xmm1
	movss	DWORD PTR vec3$[rsp+8], xmm0
; Line 229
	lea	rax, QWORD PTR vec3$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	eax, DWORD PTR $T4[rsp]
	or	eax, 1
	mov	DWORD PTR $T4[rsp], eax
	lea	rcx, QWORD PTR vec3$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	npad	1
	mov	rcx, QWORD PTR vec1$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	npad	1
	mov	rcx, QWORD PTR vec2$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
; Line 230
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?CrossVector@@YA?AVVECTOR@@V1@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?CrossVector@@YA?AVVECTOR@@V1@0@Z ENDP			; CrossVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
vec3$ = 40
$T4 = 68
__$ReturnUdt$ = 112
vec1$ = 120
vec2$ = 128
?dtor$0@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA PROC	; `CrossVector'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR vec2$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA ENDP	; `CrossVector'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
vec3$ = 40
$T4 = 68
__$ReturnUdt$ = 112
vec1$ = 120
vec2$ = 128
?dtor$1@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA PROC	; `CrossVector'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR vec1$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??CrossVector@@YA?AVVECTOR@@V1@0@Z@4HA ENDP	; `CrossVector'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
dot$ = 48
$T1 = 52
vec1$ = 80
vec2$ = 88
?DotProduct@@YAMVVECTOR@@0@Z PROC			; DotProduct
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 198
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
; Line 208
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR vec1$[rsp]
	mov	rcx, QWORD PTR vec2$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR dot$[rsp], xmm0
; Line 209
	movss	xmm0, DWORD PTR dot$[rsp]
	movss	DWORD PTR $T1[rsp], xmm0
	mov	rcx, QWORD PTR vec1$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	mov	rcx, QWORD PTR vec2$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	movss	xmm0, DWORD PTR $T1[rsp]
; Line 210
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?DotProduct@@YAMVVECTOR@@0@Z ENDP			; DotProduct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
q$ = 56
halfTheta$ = 84
cosHalfTheta$ = 88
sinHalfTheta$ = 92
xs$ = 96
ys$ = 100
zs$ = 104
wx$ = 108
wy$ = 112
wz$ = 116
xx$ = 120
xy$ = 124
xz$ = 128
yy$ = 132
yz$ = 136
zz$ = 140
$T4 = 144
__$ReturnUdt$ = 192
axis$ = 200
theta$ = 208
m$ = 216
?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z PROC	; AxisAngleToMatrix
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 168
$LN7:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]
	mov	DWORD PTR $T4[rsp], 0
; Line 169
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR q$[rsp]
	call	??0QUAT@@QEAA@MMMM@Z			; QUAT::QUAT
; Line 170
	cvtss2sd xmm0, DWORD PTR theta$[rsp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR halfTheta$[rsp], xmm0
; Line 171
	movss	xmm0, DWORD PTR halfTheta$[rsp]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cosHalfTheta$[rsp], xmm0
; Line 172
	movss	xmm0, DWORD PTR halfTheta$[rsp]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sinHalfTheta$[rsp], xmm0
; Line 174
	mov	rax, QWORD PTR axis$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR sinHalfTheta$[rsp]
	movss	DWORD PTR q$[rsp], xmm0
; Line 175
	mov	rax, QWORD PTR axis$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR sinHalfTheta$[rsp]
	movss	DWORD PTR q$[rsp+4], xmm0
; Line 176
	mov	rax, QWORD PTR axis$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR sinHalfTheta$[rsp]
	movss	DWORD PTR q$[rsp+8], xmm0
; Line 177
	movss	xmm0, DWORD PTR cosHalfTheta$[rsp]
	movss	DWORD PTR q$[rsp+12], xmm0
; Line 178
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xs$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+4]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR ys$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+8]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR zs$[rsp], xmm0
; Line 179
	movss	xmm0, DWORD PTR q$[rsp+12]
	mulss	xmm0, DWORD PTR xs$[rsp]
	movss	DWORD PTR wx$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+12]
	mulss	xmm0, DWORD PTR ys$[rsp]
	movss	DWORD PTR wy$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+12]
	mulss	xmm0, DWORD PTR zs$[rsp]
	movss	DWORD PTR wz$[rsp], xmm0
; Line 180
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR xs$[rsp]
	movss	DWORD PTR xx$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR ys$[rsp]
	movss	DWORD PTR xy$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR zs$[rsp]
	movss	DWORD PTR xz$[rsp], xmm0
; Line 181
	movss	xmm0, DWORD PTR q$[rsp+4]
	mulss	xmm0, DWORD PTR ys$[rsp]
	movss	DWORD PTR yy$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+4]
	mulss	xmm0, DWORD PTR zs$[rsp]
	movss	DWORD PTR yz$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+8]
	mulss	xmm0, DWORD PTR zs$[rsp]
	movss	DWORD PTR zz$[rsp], xmm0
; Line 182
	movss	xmm0, DWORD PTR yy$[rsp]
	addss	xmm0, DWORD PTR zz$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 183
	movss	xmm0, DWORD PTR xy$[rsp]
	subss	xmm0, DWORD PTR wz$[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 184
	movss	xmm0, DWORD PTR xz$[rsp]
	addss	xmm0, DWORD PTR wy$[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 185
	movss	xmm0, DWORD PTR xy$[rsp]
	addss	xmm0, DWORD PTR wz$[rsp]
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 186
	movss	xmm0, DWORD PTR xx$[rsp]
	addss	xmm0, DWORD PTR zz$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 187
	movss	xmm0, DWORD PTR yz$[rsp]
	subss	xmm0, DWORD PTR wx$[rsp]
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 188
	movss	xmm0, DWORD PTR xz$[rsp]
	subss	xmm0, DWORD PTR wy$[rsp]
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 189
	movss	xmm0, DWORD PTR yz$[rsp]
	addss	xmm0, DWORD PTR wx$[rsp]
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 190
	movss	xmm0, DWORD PTR xx$[rsp]
	addss	xmm0, DWORD PTR yy$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 192
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 193
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 194
	lea	rax, QWORD PTR q$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR $T4[rsp]
	or	eax, 1
	mov	DWORD PTR $T4[rsp], eax
	lea	rcx, QWORD PTR q$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	npad	1
	mov	rcx, QWORD PTR axis$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
; Line 195
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z ENDP	; AxisAngleToMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q$ = 56
halfTheta$ = 84
cosHalfTheta$ = 88
sinHalfTheta$ = 92
xs$ = 96
ys$ = 100
zs$ = 104
wx$ = 108
wy$ = 112
wz$ = 116
xx$ = 120
xy$ = 124
xz$ = 128
yy$ = 132
yz$ = 136
zz$ = 140
$T4 = 144
__$ReturnUdt$ = 192
axis$ = 200
theta$ = 208
m$ = 216
?dtor$0@?0??AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z@4HA PROC ; `AxisAngleToMatrix'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR axis$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??AxisAngleToMatrix@@YA?AVQUAT@@VVECTOR@@MQEAM@Z@4HA ENDP ; `AxisAngleToMatrix'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
n$ = 48
__$ArrayPad$ = 128
m$ = 160
?MatrixInverse@@YAXQEAM@Z PROC				; MatrixInverse
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 139
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 142
	mov	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR n$[rsp]
	call	?CopyMatrix@@YAXQEAM0@Z			; CopyMatrix
; Line 143
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR n$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 144
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR n$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 145
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR n$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 147
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR n$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 148
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR n$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 149
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR n$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 151
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR n$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 152
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR n$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 153
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR n$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 155
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 156
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 157
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 158
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?MatrixInverse@@YAXQEAM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?MatrixInverse@@YAXQEAM@Z ENDP				; MatrixInverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
temp$ = 48
__$ArrayPad$ = 128
m$ = 160
n$ = 168
?MultMatrix@@YAXQEAM0@Z PROC				; MultMatrix
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 53
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 56
	mov	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR temp$[rsp]
	call	?CopyMatrix@@YAXQEAM0@Z			; CopyMatrix
; Line 57
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 62
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 67
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 72
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 77
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 82
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 87
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 92
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 97
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 102
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 107
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 112
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 117
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 122
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 127
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 132
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR n$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR m$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 136
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?MultMatrix@@YAXQEAM0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?MultMatrix@@YAXQEAM0@Z ENDP				; MultMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
m$ = 16
n$ = 24
?CopyMatrix@@YAXQEAM0@Z PROC				; CopyMatrix
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 33
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
; Line 34
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 35
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 36
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 37
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 38
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 39
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 40
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 41
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 42
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 43
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 44
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 45
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 46
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 47
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 48
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 49
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR m$[rsp]
	mov	r8, QWORD PTR n$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 50
	pop	rdi
	ret	0
?CopyMatrix@@YAXQEAM0@Z ENDP				; CopyMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
m$ = 16
?LoadIdentity@@YAXQEAM@Z PROC				; LoadIdentity
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 10
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
; Line 11
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 12
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 13
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 14
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 16
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 17
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 18
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 19
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 21
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 22
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 23
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 24
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 26
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 27
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 28
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR m$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 29
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 30
	pop	rdi
	ret	0
?LoadIdentity@@YAXQEAM@Z ENDP				; LoadIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cmath
; Line 264
$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H
; Line 265
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	sqrtf
; Line 266
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sin@@YAMM@Z PROC					; sin, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cmath
; Line 256
$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H
; Line 257
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	sinf
; Line 258
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?cos@@YAMM@Z PROC					; cos, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cmath
; Line 88
$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H
; Line 89
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	cosf
; Line 90
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 16
__formal$ = 24
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 401
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	pop	rdi
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 16
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\locmath.cpp
; Line 401
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	pop	rdi
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
