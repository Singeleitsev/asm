; Listing generated by Microsoft (R) Optimizing Compiler Version 19.38.33133.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG124716 DB	'invalid argument', 00H
	ORG $+3
$SG124717 DB	'%s', 00H
	ORG $+9
$SG124718 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.38.33130\include\xmemory', 00H
	ORG $+14
$SG124719 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '8', 00H, '.', 00H, '3', 00H, '3'
	DB	00H, '1', 00H, '3', 00H, '0', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
$SG124720 DB	00H, 00H
	ORG $+2
$SG124721 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	??0MATRIX@@QEAA@XZ				; MATRIX::MATRIX
PUBLIC	??1MATRIX@@QEAA@XZ				; MATRIX::~MATRIX
PUBLIC	?LoadIdentity@MATRIX@@QEAAXXZ			; MATRIX::LoadIdentity
PUBLIC	?CopyMatrix@MATRIX@@QEAAXQEAM@Z			; MATRIX::CopyMatrix
PUBLIC	?MultMatrix@MATRIX@@QEAAXQEAM@Z			; MATRIX::MultMatrix
PUBLIC	?MatrixInverse@MATRIX@@QEAAXXZ			; MATRIX::MatrixInverse
PUBLIC	?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z	; MATRIX::MatrixFromAxisAngle
PUBLIC	?QuatToMatrix@MATRIX@@QEAAXVQUAT@@@Z		; MATRIX::QuatToMatrix
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@bf800000
EXTRN	cosf:PROC
EXTRN	sinf:PROC
EXTRN	??1VECTOR@@QEAA@XZ:PROC				; VECTOR::~VECTOR
EXTRN	??0QUAT@@QEAA@MMMM@Z:PROC			; QUAT::QUAT
EXTRN	??1QUAT@@QEAA@XZ:PROC				; QUAT::~QUAT
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?cos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?sin@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0MATRIX@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$??0MATRIX@@QEAA@XZ
$pdata$??1MATRIX@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1MATRIX@@QEAA@XZ
$pdata$?LoadIdentity@MATRIX@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+380
	DD	imagerel $unwind$?LoadIdentity@MATRIX@@QEAAXXZ
$pdata$?CopyMatrix@MATRIX@@QEAAXQEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+637
	DD	imagerel $unwind$?CopyMatrix@MATRIX@@QEAAXQEAM@Z
$pdata$?MultMatrix@MATRIX@@QEAAXQEAM@Z DD imagerel $LN4
	DD	imagerel $LN4+3055
	DD	imagerel $unwind$?MultMatrix@MATRIX@@QEAAXQEAM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??MultMatrix@MATRIX@@QEAAXQEAM@Z@4HA DD imagerel ?dtor$0@?0??MultMatrix@MATRIX@@QEAAXQEAM@Z@4HA
	DD	imagerel ?dtor$0@?0??MultMatrix@MATRIX@@QEAAXQEAM@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??MultMatrix@MATRIX@@QEAAXQEAM@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?MatrixInverse@MATRIX@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+627
	DD	imagerel $unwind$?MatrixInverse@MATRIX@@QEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??MatrixInverse@MATRIX@@QEAAXXZ@4HA DD imagerel ?dtor$0@?0??MatrixInverse@MATRIX@@QEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??MatrixInverse@MATRIX@@QEAAXXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??MatrixInverse@MATRIX@@QEAAXXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z DD imagerel $LN5
	DD	imagerel $LN5+1066
	DD	imagerel $unwind$?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z@4HA DD imagerel ?dtor$0@?0??MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z@4HA
	DD	imagerel ?dtor$0@?0??MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?QuatToMatrix@MATRIX@@QEAAXVQUAT@@@Z DD imagerel $LN4
	DD	imagerel $LN4+809
	DD	imagerel $unwind$?QuatToMatrix@MATRIX@@QEAAXVQUAT@@@Z
pdata	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??MatrixInverse@MATRIX@@QEAAXXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??MultMatrix@MATRIX@@QEAAXQEAM@Z@4HA
	DD	00H
	DD	05H
voltbl	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixInverse@MATRIX@@QEAAXXZ
	DD	030H
	DD	025aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MultMatrix@MATRIX@@QEAAXQEAM@Z
	DD	035H
	DD	0bd6H
voltbl	ENDS
CONST	SEGMENT
	ORG $+2
?MultMatrix@MATRIX@@QEAAXQEAM@Z$rtcName$0 DB 074H	; MATRIX::MultMatrix
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
?MultMatrix@MATRIX@@QEAAXQEAM@Z$rtcVarDesc DD 030H	; MATRIX::MultMatrix
	DD	040H
	DQ	FLAT:?MultMatrix@MATRIX@@QEAAXQEAM@Z$rtcName$0
	ORG $+48
?MultMatrix@MATRIX@@QEAAXQEAM@Z$rtcFrameData DD 01H	; MATRIX::MultMatrix
	DD	00H
	DQ	FLAT:?MultMatrix@MATRIX@@QEAAXQEAM@Z$rtcVarDesc
?MatrixInverse@MATRIX@@QEAAXXZ$rtcName$0 DB 074H	; MATRIX::MatrixInverse
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
?MatrixInverse@MATRIX@@QEAAXXZ$rtcVarDesc DD 030H	; MATRIX::MatrixInverse
	DD	040H
	DQ	FLAT:?MatrixInverse@MATRIX@@QEAAXXZ$rtcName$0
	ORG $+48
?MatrixInverse@MATRIX@@QEAAXXZ$rtcFrameData DD 01H	; MATRIX::MatrixInverse
	DD	00H
	DQ	FLAT:?MatrixInverse@MATRIX@@QEAAXXZ$rtcVarDesc
?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z$rtcName$0 DB 071H ; MATRIX::MatrixFromAxisAngle
	DB	00H
	ORG $+14
?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z$rtcVarDesc DD 038H ; MATRIX::MatrixFromAxisAngle
	DD	010H
	DQ	FLAT:?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z$rtcName$0
	ORG $+48
?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z$rtcFrameData DD 01H ; MATRIX::MatrixFromAxisAngle
	DD	00H
	DQ	FLAT:?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$??0MATRIX@@QEAA@XZ DD 020a01H
	DD	07006320aH
$unwind$??1MATRIX@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$?LoadIdentity@MATRIX@@QEAAXXZ DD 010601H
	DD	07006H
$unwind$?CopyMatrix@MATRIX@@QEAAXQEAM@Z DD 010b01H
	DD	0700bH
$unwind$?MultMatrix@MATRIX@@QEAAXQEAM@Z DD 033d19H
	DD	0120112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?MultMatrix@MATRIX@@QEAAXQEAM@Z
	DD	082H
$cppxdata$?MultMatrix@MATRIX@@QEAAXQEAM@Z DB 028H
	DD	imagerel $stateUnwindMap$?MultMatrix@MATRIX@@QEAAXQEAM@Z
	DD	imagerel $ip2state$?MultMatrix@MATRIX@@QEAAXQEAM@Z
$stateUnwindMap$?MultMatrix@MATRIX@@QEAAXQEAM@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??MultMatrix@MATRIX@@QEAAXQEAM@Z@4HA
$ip2state$?MultMatrix@MATRIX@@QEAAXQEAM@Z DB 06H
	DB	00H
	DB	00H
	DB	090H
	DB	02H
	DB	0d5H, '-'
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??MultMatrix@MATRIX@@QEAAXQEAM@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?MatrixInverse@MATRIX@@QEAAXXZ DD 033819H
	DD	012010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?MatrixInverse@MATRIX@@QEAAXXZ
	DD	082H
$cppxdata$?MatrixInverse@MATRIX@@QEAAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?MatrixInverse@MATRIX@@QEAAXXZ
	DD	imagerel $ip2state$?MatrixInverse@MATRIX@@QEAAXXZ
$stateUnwindMap$?MatrixInverse@MATRIX@@QEAAXXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??MatrixInverse@MATRIX@@QEAAXXZ@4HA
$ip2state$?MatrixInverse@MATRIX@@QEAAXXZ DB 06H
	DB	00H
	DB	00H
	DB	086H
	DB	02H
	DB	0f9H, 07H
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??MatrixInverse@MATRIX@@QEAAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z DD 033111H
	DD	0120118H
	DD	07011H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z
$cppxdata$?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z DB 028H
	DD	imagerel $stateUnwindMap$?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z
	DD	imagerel $ip2state$?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z
$stateUnwindMap$?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z@4HA
$ip2state$?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z DB 06H
	DB	00H
	DB	00H
	DB	'b'
	DB	02H
	DB	'Q', 0fH
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?QuatToMatrix@MATRIX@@QEAAXVQUAT@@@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 010601H
	DD	07006H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
wx$ = 32
wy$ = 36
wz$ = 40
xx$ = 44
yy$ = 48
yz$ = 52
xy$ = 56
xz$ = 60
zz$ = 64
x2$ = 68
y2$ = 72
z2$ = 76
this$ = 96
quat$ = 104
?QuatToMatrix@MATRIX@@QEAAXVQUAT@@@Z PROC		; MATRIX::QuatToMatrix
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 196
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
; Line 199
	mov	rax, QWORD PTR quat$[rsp]
	mov	rcx, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR x2$[rsp], xmm0
; Line 200
	mov	rax, QWORD PTR quat$[rsp]
	mov	rcx, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR y2$[rsp], xmm0
; Line 201
	mov	rax, QWORD PTR quat$[rsp]
	mov	rcx, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR z2$[rsp], xmm0
; Line 202
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR x2$[rsp]
	movss	DWORD PTR xx$[rsp], xmm0
; Line 203
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR xy$[rsp], xmm0
; Line 204
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR xz$[rsp], xmm0
; Line 205
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR yy$[rsp], xmm0
; Line 206
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR yz$[rsp], xmm0
; Line 207
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR zz$[rsp], xmm0
; Line 208
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR x2$[rsp]
	movss	DWORD PTR wx$[rsp], xmm0
; Line 209
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR y2$[rsp]
	movss	DWORD PTR wy$[rsp], xmm0
; Line 210
	mov	rax, QWORD PTR quat$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR z2$[rsp]
	movss	DWORD PTR wz$[rsp], xmm0
; Line 211
	movss	xmm0, DWORD PTR yy$[rsp]
	addss	xmm0, DWORD PTR zz$[rsp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 212
	movss	xmm0, DWORD PTR xy$[rsp]
	subss	xmm0, DWORD PTR wz$[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 213
	movss	xmm0, DWORD PTR xz$[rsp]
	addss	xmm0, DWORD PTR wy$[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 214
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 215
	movss	xmm0, DWORD PTR xy$[rsp]
	addss	xmm0, DWORD PTR wz$[rsp]
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 216
	movss	xmm0, DWORD PTR xx$[rsp]
	addss	xmm0, DWORD PTR zz$[rsp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 217
	movss	xmm0, DWORD PTR yz$[rsp]
	subss	xmm0, DWORD PTR wx$[rsp]
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 218
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 219
	movss	xmm0, DWORD PTR xz$[rsp]
	subss	xmm0, DWORD PTR wy$[rsp]
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 220
	movss	xmm0, DWORD PTR yz$[rsp]
	addss	xmm0, DWORD PTR wx$[rsp]
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 221
	movss	xmm0, DWORD PTR xx$[rsp]
	addss	xmm0, DWORD PTR yy$[rsp]
	cvtss2sd xmm0, xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 222
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 223
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 224
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 225
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 226
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 227
	mov	rcx, QWORD PTR quat$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?QuatToMatrix@MATRIX@@QEAAXVQUAT@@@Z ENDP		; MATRIX::QuatToMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
q$ = 56
halfTheta$ = 84
cosHalfTheta$ = 88
sinHalfTheta$ = 92
xs$ = 96
ys$ = 100
zs$ = 104
wx$ = 108
wy$ = 112
wz$ = 116
xx$ = 120
xy$ = 124
xz$ = 128
yy$ = 132
yz$ = 136
zz$ = 140
this$ = 160
axis$ = 168
theta$ = 176
?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z PROC	; MATRIX::MatrixFromAxisAngle
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 168
$LN5:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
; Line 169
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR q$[rsp]
	call	??0QUAT@@QEAA@MMMM@Z			; QUAT::QUAT
; Line 170
	cvtss2sd xmm0, DWORD PTR theta$[rsp]
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR halfTheta$[rsp], xmm0
; Line 171
	movss	xmm0, DWORD PTR halfTheta$[rsp]
	call	?cos@@YAMM@Z				; cos
	movss	DWORD PTR cosHalfTheta$[rsp], xmm0
; Line 172
	movss	xmm0, DWORD PTR halfTheta$[rsp]
	call	?sin@@YAMM@Z				; sin
	movss	DWORD PTR sinHalfTheta$[rsp], xmm0
; Line 174
	mov	rax, QWORD PTR axis$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR sinHalfTheta$[rsp]
	movss	DWORD PTR q$[rsp], xmm0
; Line 175
	mov	rax, QWORD PTR axis$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR sinHalfTheta$[rsp]
	movss	DWORD PTR q$[rsp+4], xmm0
; Line 176
	mov	rax, QWORD PTR axis$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR sinHalfTheta$[rsp]
	movss	DWORD PTR q$[rsp+8], xmm0
; Line 177
	movss	xmm0, DWORD PTR cosHalfTheta$[rsp]
	movss	DWORD PTR q$[rsp+12], xmm0
; Line 178
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xs$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+4]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR ys$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+8]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR zs$[rsp], xmm0
; Line 179
	movss	xmm0, DWORD PTR q$[rsp+12]
	mulss	xmm0, DWORD PTR xs$[rsp]
	movss	DWORD PTR wx$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+12]
	mulss	xmm0, DWORD PTR ys$[rsp]
	movss	DWORD PTR wy$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+12]
	mulss	xmm0, DWORD PTR zs$[rsp]
	movss	DWORD PTR wz$[rsp], xmm0
; Line 180
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR xs$[rsp]
	movss	DWORD PTR xx$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR ys$[rsp]
	movss	DWORD PTR xy$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp]
	mulss	xmm0, DWORD PTR zs$[rsp]
	movss	DWORD PTR xz$[rsp], xmm0
; Line 181
	movss	xmm0, DWORD PTR q$[rsp+4]
	mulss	xmm0, DWORD PTR ys$[rsp]
	movss	DWORD PTR yy$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+4]
	mulss	xmm0, DWORD PTR zs$[rsp]
	movss	DWORD PTR yz$[rsp], xmm0
	movss	xmm0, DWORD PTR q$[rsp+8]
	mulss	xmm0, DWORD PTR zs$[rsp]
	movss	DWORD PTR zz$[rsp], xmm0
; Line 182
	movss	xmm0, DWORD PTR yy$[rsp]
	addss	xmm0, DWORD PTR zz$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 183
	movss	xmm0, DWORD PTR xy$[rsp]
	subss	xmm0, DWORD PTR wz$[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 184
	movss	xmm0, DWORD PTR xz$[rsp]
	addss	xmm0, DWORD PTR wy$[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 185
	movss	xmm0, DWORD PTR xy$[rsp]
	addss	xmm0, DWORD PTR wz$[rsp]
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 186
	movss	xmm0, DWORD PTR xx$[rsp]
	addss	xmm0, DWORD PTR zz$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 187
	movss	xmm0, DWORD PTR yz$[rsp]
	subss	xmm0, DWORD PTR wx$[rsp]
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 188
	movss	xmm0, DWORD PTR xz$[rsp]
	subss	xmm0, DWORD PTR wy$[rsp]
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 189
	movss	xmm0, DWORD PTR yz$[rsp]
	addss	xmm0, DWORD PTR wx$[rsp]
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 190
	movss	xmm0, DWORD PTR xx$[rsp]
	addss	xmm0, DWORD PTR yy$[rsp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 191
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 192
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 193
	lea	rcx, QWORD PTR q$[rsp]
	call	??1QUAT@@QEAA@XZ			; QUAT::~QUAT
	npad	1
	mov	rcx, QWORD PTR axis$[rsp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z ENDP	; MATRIX::MatrixFromAxisAngle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
q$ = 56
halfTheta$ = 84
cosHalfTheta$ = 88
sinHalfTheta$ = 92
xs$ = 96
ys$ = 100
zs$ = 104
wx$ = 108
wy$ = 112
wz$ = 116
xx$ = 120
xy$ = 124
xz$ = 128
yy$ = 132
yz$ = 136
zz$ = 140
this$ = 160
axis$ = 168
theta$ = 176
?dtor$0@?0??MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z@4HA PROC ; `MATRIX::MatrixFromAxisAngle'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR axis$[rbp]
	call	??1VECTOR@@QEAA@XZ			; VECTOR::~VECTOR
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??MatrixFromAxisAngle@MATRIX@@QEAAXVVECTOR@@M@Z@4HA ENDP ; `MATRIX::MatrixFromAxisAngle'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
temp$ = 48
__$ArrayPad$ = 128
this$ = 160
?MatrixInverse@MATRIX@@QEAAXXZ PROC			; MATRIX::MatrixInverse
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 145
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 146
	lea	rcx, QWORD PTR temp$[rsp]
	call	??0MATRIX@@QEAA@XZ			; MATRIX::MATRIX
	npad	1
; Line 148
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR temp$[rsp]
	call	?CopyMatrix@MATRIX@@QEAAXQEAM@Z		; MATRIX::CopyMatrix
; Line 150
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 151
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 152
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 154
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 155
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 156
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 158
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 159
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 160
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 162
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 163
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 164
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR __real@bf800000
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 165
	lea	rcx, QWORD PTR temp$[rsp]
	call	??1MATRIX@@QEAA@XZ			; MATRIX::~MATRIX
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?MatrixInverse@MATRIX@@QEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?MatrixInverse@MATRIX@@QEAAXXZ ENDP			; MATRIX::MatrixInverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
temp$ = 48
__$ArrayPad$ = 128
this$ = 160
?dtor$0@?0??MatrixInverse@MATRIX@@QEAAXXZ@4HA PROC	; `MATRIX::MatrixInverse'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR temp$[rbp]
	call	??1MATRIX@@QEAA@XZ			; MATRIX::~MATRIX
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??MatrixInverse@MATRIX@@QEAAXXZ@4HA ENDP	; `MATRIX::MatrixInverse'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
temp$ = 48
__$ArrayPad$ = 128
this$ = 160
m$ = 168
?MultMatrix@MATRIX@@QEAAXQEAM@Z PROC			; MATRIX::MultMatrix
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 58
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 59
	lea	rcx, QWORD PTR temp$[rsp]
	call	??0MATRIX@@QEAA@XZ			; MATRIX::MATRIX
	npad	1
; Line 61
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR temp$[rsp]
	call	?CopyMatrix@MATRIX@@QEAAXQEAM@Z		; MATRIX::CopyMatrix
; Line 63
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 68
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 73
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 78
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 83
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 88
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 93
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 98
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 103
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 108
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 113
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 118
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 123
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 128
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 133
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 138
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR temp$[rsp+rax]
	mulss	xmm0, DWORD PTR [rdx+rcx]
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR temp$[rsp+rax]
	mulss	xmm1, DWORD PTR [rdx+rcx]
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR this$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 142
	lea	rcx, QWORD PTR temp$[rsp]
	call	??1MATRIX@@QEAA@XZ			; MATRIX::~MATRIX
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?MultMatrix@MATRIX@@QEAAXQEAM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?MultMatrix@MATRIX@@QEAAXQEAM@Z ENDP			; MATRIX::MultMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
temp$ = 48
__$ArrayPad$ = 128
this$ = 160
m$ = 168
?dtor$0@?0??MultMatrix@MATRIX@@QEAAXQEAM@Z@4HA PROC	; `MATRIX::MultMatrix'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR temp$[rbp]
	call	??1MATRIX@@QEAA@XZ			; MATRIX::~MATRIX
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??MultMatrix@MATRIX@@QEAAXQEAM@Z@4HA ENDP	; `MATRIX::MultMatrix'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
this$ = 16
m$ = 24
?CopyMatrix@MATRIX@@QEAAXQEAM@Z PROC			; MATRIX::CopyMatrix
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 38
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
; Line 39
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 40
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 41
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 42
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 43
	mov	eax, 4
	imul	rax, rax, 4
	mov	ecx, 4
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 44
	mov	eax, 4
	imul	rax, rax, 5
	mov	ecx, 4
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 45
	mov	eax, 4
	imul	rax, rax, 6
	mov	ecx, 4
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 46
	mov	eax, 4
	imul	rax, rax, 7
	mov	ecx, 4
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 47
	mov	eax, 4
	imul	rax, rax, 8
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 48
	mov	eax, 4
	imul	rax, rax, 9
	mov	ecx, 4
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 49
	mov	eax, 4
	imul	rax, rax, 10
	mov	ecx, 4
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 50
	mov	eax, 4
	imul	rax, rax, 11
	mov	ecx, 4
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 51
	mov	eax, 4
	imul	rax, rax, 12
	mov	ecx, 4
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 52
	mov	eax, 4
	imul	rax, rax, 13
	mov	ecx, 4
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 53
	mov	eax, 4
	imul	rax, rax, 14
	mov	ecx, 4
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 54
	mov	eax, 4
	imul	rax, rax, 15
	mov	ecx, 4
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR m$[rsp]
	movss	xmm0, DWORD PTR [r8+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 55
	pop	rdi
	ret	0
?CopyMatrix@MATRIX@@QEAAXQEAM@Z ENDP			; MATRIX::CopyMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
this$ = 16
?LoadIdentity@MATRIX@@QEAAXXZ PROC			; MATRIX::LoadIdentity
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 15
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
; Line 16
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 17
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 18
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 19
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 21
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 22
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 23
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 24
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 26
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 27
	mov	eax, 4
	imul	rax, rax, 9
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 28
	mov	eax, 4
	imul	rax, rax, 10
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 29
	mov	eax, 4
	imul	rax, rax, 11
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 31
	mov	eax, 4
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 32
	mov	eax, 4
	imul	rax, rax, 13
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 33
	mov	eax, 4
	imul	rax, rax, 14
	mov	rcx, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 34
	mov	eax, 4
	imul	rax, rax, 15
	mov	rcx, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
; Line 35
	pop	rdi
	ret	0
?LoadIdentity@MATRIX@@QEAAXXZ ENDP			; MATRIX::LoadIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
this$ = 16
??1MATRIX@@QEAA@XZ PROC					; MATRIX::~MATRIX
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 11
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
; Line 12
	pop	rdi
	ret	0
??1MATRIX@@QEAA@XZ ENDP					; MATRIX::~MATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
this$ = 48
??0MATRIX@@QEAA@XZ PROC					; MATRIX::MATRIX
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 6
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 7
	mov	rcx, QWORD PTR this$[rsp]
	call	?LoadIdentity@MATRIX@@QEAAXXZ		; MATRIX::LoadIdentity
; Line 8
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0MATRIX@@QEAA@XZ ENDP					; MATRIX::MATRIX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sin@@YAMM@Z PROC					; sin, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cmath
; Line 256
$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H
; Line 257
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	sinf
; Line 258
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?cos@@YAMM@Z PROC					; cos, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cmath
; Line 88
$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H
; Line 89
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	cosf
; Line 90
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 16
__formal$ = 24
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 228
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	pop	rdi
	ret	0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 16
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT
; File D:\dev\cpp\40_BIM\01_AlanBaylis\cpp\OGLMDI2_VS2022\Build01\matrix.cpp
; Line 228
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	pop	rdi
	ret	0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
